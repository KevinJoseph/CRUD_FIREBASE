{"version":3,"sources":["firebase.js","components/LinksForm.js","components/Links.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","LinksForm","props","initialStateValues","url","dni","name","description","useState","values","setValues","handleInputChange","e","target","value","getLinkById","id","a","collection","doc","get","data","useEffect","currentId","onSubmit","preventDefault","str","RegExp","test","toast","type","autoClose","addOrEditLink","className","placeholder","onChange","Links","links","setLinks","setCurrentId","getLinks","onSnapshot","querySnapshot","docs","forEach","push","onDeleteLink","window","confirm","delete","linkObject","set","update","console","error","map","link","key","onClick","href","rel","where","snapshot","log","index","App","path","component","Search","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0d25648e.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/firestore';\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyCKqmaFx2Uv8lpREdRQ33_9CPCQ4SnX3Mg\",\r\n  authDomain: \"certifapp-bd.firebaseapp.com\",\r\n  databaseURL: \"https://certifapp-bd-default-rtdb.firebaseio.com\",\r\n  projectId: \"certifapp-bd\",\r\n  storageBucket: \"certifapp-bd.appspot.com\",\r\n  messagingSenderId: \"54485478783\",\r\n  appId: \"1:54485478783:web:f52225659918f5fa12be4a\",\r\n  measurementId: \"G-3CZQEBRPS8\"\r\n};\r\n// Initialize Firebase\r\nconst fb = firebase.initializeApp(firebaseConfig);\r\n\r\nexport const db = fb.firestore();","import React, { useState, useEffect } from \"react\";\r\nimport { db } from \"../firebase\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst LinksForm = (props) => {\r\n  const initialStateValues = {\r\n    url: \"\",\r\n    dni: \"\",\r\n    name: \"\",\r\n    description: \"\",\r\n  };\r\n\r\n  const [values, setValues] = useState(initialStateValues);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n\r\n  const validURL = (str) => {\r\n    var pattern = new RegExp(\r\n      \"^(https?:\\\\/\\\\/)?\" + // protocol\r\n      \"((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\" + // domain name\r\n      \"((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\" + // OR ip (v4) address\r\n      \"(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\" + // port and path\r\n      \"(\\\\?[;&a-z\\\\d%_.~+=-]*)?\" + // query string\r\n        \"(\\\\#[-a-z\\\\d_]*)?$\",\r\n      \"i\"\r\n    ); // fragment locator\r\n    return !!pattern.test(str);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!validURL(values.url)) {\r\n      return toast(\"invalid url\", { type: \"warning\", autoClose: 1000 });\r\n    }\r\n\r\n    props.addOrEditLink(values);\r\n    setValues({ ...initialStateValues });\r\n  };\r\n\r\n  const getLinkById = async (id) => {\r\n    const doc = await db.collection(\"links\").doc(id).get();\r\n    setValues({ ...doc.data() });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.currentId === \"\") {\r\n      setValues({ ...initialStateValues });\r\n    } else {\r\n      getLinkById(props.currentId);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [props.currentId]);\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"card card-body border-primary\">\r\n\r\n      <div className=\"form-group input-group\">\r\n        <div className=\"input-group-text bg-light\">\r\n          <i className=\"material-icons\">create</i>\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          value={values.dni}\r\n          name=\"dni\"\r\n          placeholder=\"DNI\"\r\n          className=\"form-control\"\r\n          onChange={handleInputChange}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"form-group input-group\">\r\n        <div className=\"input-group-text bg-light\">\r\n          <i className=\"material-icons\">create</i>\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          value={values.name}\r\n          name=\"name\"\r\n          placeholder=\"NOMBRES Y APELLIDOS\"\r\n          className=\"form-control\"\r\n          onChange={handleInputChange}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"form-group input-group\">\r\n        <div className=\"input-group-text bg-light\">\r\n          <i className=\"material-icons\">insert_link</i>\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"LINK DE CERTIFICADO\"\r\n          value={values.url}\r\n          name=\"url\"\r\n          onChange={handleInputChange}\r\n        />\r\n      </div>\r\n\r\n      <button className=\"btn btn-primary btn-block\">\r\n        {props.currentId === \"\" ? \"Guardar\" : \"Editar\"}\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default LinksForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport LinksForm from \"./LinksForm\";\r\n\r\nimport { db } from \"../firebase\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst Links = () => {\r\n  const [links, setLinks] = useState([]);\r\n  const [currentId, setCurrentId] = useState(\"\");\r\n\r\n  const getLinks = async () => {\r\n    db.collection(\"links\").onSnapshot((querySnapshot) => {\r\n      const docs = [];\r\n      querySnapshot.forEach((doc) => {\r\n        docs.push({ ...doc.data(), id: doc.id });\r\n      });\r\n      setLinks(docs);\r\n    });\r\n  };\r\n\r\n  const onDeleteLink = async (id) => {\r\n    if (window.confirm(\"are you sure you want to delete this link?\")) {\r\n      await db.collection(\"links\").doc(id).delete();\r\n      toast(\"Link Removed Successfully\", {\r\n        type: \"error\",\r\n        autoClose: 2000\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getLinks();\r\n  }, []);\r\n\r\n  const addOrEditLink = async (linkObject) => {\r\n    try {\r\n      if (currentId === \"\") {\r\n        await db.collection(\"links\").doc().set(linkObject);\r\n        toast(\"New Link Added\", {\r\n          type: \"success\",\r\n        });\r\n      } else {\r\n        await db.collection(\"links\").doc(currentId).update(linkObject);\r\n        toast(\"Link Updated Successfully\", {\r\n          type: \"info\",\r\n        });\r\n        setCurrentId(\"\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"col-md-4 p-2\">\r\n        <LinksForm {...{ addOrEditLink, currentId, links }} />\r\n      </div>\r\n      <div className=\"col-md-8 p-2\">\r\n        {links.map((link) => (\r\n          <div className=\"card mb-1\" key={link.id}>\r\n            <div className=\"card-body\">\r\n              <div className=\"d-flex justify-content-between\">\r\n                <h4>DNI: {link.dni}</h4>\r\n                <div>\r\n                  <i\r\n                    className=\"material-icons text-danger\"\r\n                    onClick={() => onDeleteLink(link.id)}\r\n                  >\r\n                    close\r\n                  </i>\r\n                  <i\r\n                    className=\"material-icons\"\r\n                    onClick={() => setCurrentId(link.id)}\r\n                  >\r\n                    create\r\n                  </i>\r\n                </div>\r\n              </div>\r\n              <h6>Nombres: {link.name}</h6>\r\n              <a href={link.url} target=\"_blank\" rel=\"noopener noreferrer\">{link.url}</a>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Links;\r\n","import React, { useEffect, useState } from \"react\";\r\n//import LinksForm from \"./LinksForm\";\r\n\r\nimport { db } from \"../firebase\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst Links = () => {\r\n\r\nconst initialStateValues = {\r\n        url: \"\",\r\n        dni: \"\",\r\n        name: \"\",\r\n        description: \"\",\r\n\r\n    };\r\n  const [links, setLinks] = useState([]);\r\n  const [currentId, setCurrentId] = useState(\"\");\r\n  const [values, setValues] = useState(initialStateValues);\r\n\r\n  const getLinks = async () => {\r\n    db.collection(\"links\").onSnapshot((querySnapshot) => {\r\n      const docs = [];\r\n      querySnapshot.forEach((doc) => {\r\n        docs.push({ ...doc.data(), id: doc.id });\r\n      });\r\n      setLinks(docs);\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    console.log(values.dni)\r\n    //getLinks()\r\n    getLinkById(values.dni)\r\n    //setValues({ ...initialStateValues });\r\n  };\r\n\r\n  const getLinkById = async (id) => {\r\n    //const snapshot = await db.collection(\"links\").doc(id).get();\r\n    const snapshot = await db.collection(\"links\").where('dni', '==', id).get();\r\n    const docs = [];\r\n    snapshot.forEach(doc => {\r\n      //console.log(doc.id, '=>', doc.data());\r\n      //setLinks([{dni: doc.dni, name: doc.name, url: doc.url}])\r\n      docs.push({ ...doc.data(), id: doc.id });\r\n\r\n    });\r\n    setLinks(docs)\r\n    console.log(links)\r\n\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    //getLinks();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"col-md-4 p-2\">\r\n<form onSubmit={handleSubmit} className=\"card card-body border-primary\">\r\n\r\n<div className=\"form-group input-group\">\r\n  <div className=\"input-group-text bg-light\">\r\n    <i className=\"material-icons\">create</i>\r\n  </div>\r\n  <input\r\n    type=\"text\"\r\n    value={values.dni}\r\n    name=\"dni\"\r\n    placeholder=\"DNI\"\r\n    className=\"form-control\"\r\n    onChange={handleInputChange}\r\n  />\r\n</div>\r\n\r\n<button className=\"btn btn-primary btn-block\">\r\n   Consultar\r\n</button>\r\n</form>\r\n      </div>\r\n      \r\n      <div className=\"col-md-8 p-2\">\r\n        {links.map((link, index) => (\r\n          <div className=\"card mb-1\" key={index}>\r\n            <div className=\"card-body\">\r\n              <div className=\"d-flex justify-content-between\">\r\n                <h4>DNI: {link.dni}</h4>\r\n\r\n              </div>\r\n              <h6>Nombres: {link.name}</h6>\r\n              <a href={link.url} target=\"_blank\" rel=\"noopener noreferrer\">{link.url}</a>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Links;\r\n","import React from \"react\";\r\nimport Links from \"./components/Links\";\r\nimport Search from \"./components/Search\"\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\r\n\r\nimport \"./App.css\";\r\n\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"container p-4\">\r\n        <Switch>\r\n          <Route path='/search' component={Search}></Route>\r\n          <Route path='/links' component={Links}></Route>\r\n          \r\n        </Switch>\r\n\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootswatch/dist/superhero/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}